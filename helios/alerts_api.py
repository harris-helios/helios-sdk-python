"""
Helios Alerts API.

Methods are meant to represent the core functionality in the developer
documentation.  Some may have additional functionality for convenience.

"""
import logging

from helios.core.mixins import SDKCore, IndexMixin, ShowMixin
from helios.core.structure import ContentCollection, RecordCollection


class Alerts(ShowMixin, IndexMixin, SDKCore):
    """
    Helios alerts provide real-time severe weather alerts.

    **National Weather Service:**

    - Severe weather alerts for the United States are provided by the
      National Weather Service. These alerts cover events such as Flood
      Warnings, Severe Thunderstorm Warnings, and Special Weather Statements.

    **Helios:**

    - Alerts generated by Helios are based on the sensor measurements from
      the Observations API. These alerts represent regional areas with a high
      detection confidence and currently include: Road Wetness Watch, Poor
      Visibility Watch, and Heavy Precip Watch.

    """

    _core_api = 'alerts'

    def __init__(self, session=None):
        """
        Initialize Alerts instance.

        Args:
            session (helios.Session object, optional): An instance of the
                Session. Defaults to None. If unused a session will be
                created for you.

        """
        super(Alerts, self).__init__(session=session)
        self._logger = logging.getLogger(__name__)

    def index(self, **kwargs):
        """
        Get alerts matching the provided spatial, text, or
        metadata filters.

        The maximum skip value is 4000. If this is reached, truncated results
        will be returned. You will need to refine your query to avoid this.

        .. _alerts_index_documentation: https://helios.earth/developers/api/alerts/#index

        Args:
            **kwargs: Any keyword arguments found in the alerts_index_documentation_.

        Returns:
             :class:`IndexResults <helios.alerts_api.IndexResults>`

        """
        return IndexResults(super(Alerts, self).index(**kwargs))

    def show(self, alert_ids):
        """
        Get attributes for alerts.

        Args:
            alert_ids (str or sequence of strs): Helios alert ID(s).

        Returns:
            :class:`ShowResults <helios.alerts_api.ShowResults>`

        """
        return ShowResults(super(Alerts, self).show(alert_ids))


class IndexResults(ContentCollection):
    """Index results for the Alerts API."""

    def __init__(self, geojson):
        super(IndexResults, self).__init__(geojson)

    def _build(self):
        """Combine GeoJSON features into the content attribute."""
        self.content = []
        for x in self._raw:
            self.content.extend(x['features'])

    @property
    def area_description(self):
        """'areaDesc' values for every feature."""
        return [x['properties']['areaDesc'] for x in self.content]

    @property
    def bbox(self):
        """'bbox' values for every feature."""
        return [x['bbox'] for x in self.content]

    @property
    def category(self):
        """'category' values for every feature."""
        return [x['properties']['category'] for x in self.content]

    @property
    def certainty(self):
        """'certainty' values for every feature."""
        return [x['properties']['certainty'] for x in self.content]

    @property
    def country(self):
        """'country' values for every feature."""
        return [x['properties']['country'] for x in self.content]

    @property
    def description(self):
        """'description' values for every feature."""
        return [x['properties']['description'] for x in self.content]

    @property
    def effective(self):
        """'effective' values for every feature."""
        return [x['properties']['effective'] for x in self.content]

    @property
    def event(self):
        """'event' values for every feature."""
        return [x['properties']['event'] for x in self.content]

    @property
    def expires(self):
        """'expires' values for every feature."""
        return [x['properties']['expires'] for x in self.content]

    @property
    def headline(self):
        """'headline' values for every feature."""
        return [x['properties']['headline'] for x in self.content]

    @property
    def id(self):
        """'id' values for every feature."""
        return [x['id'] for x in self.content]

    @property
    def origin(self):
        """'origin' values for every feature."""
        return [x['properties']['origin'] for x in self.content]

    @property
    def severity(self):
        """'severity' values for every feature."""
        return [x['properties']['severity'] for x in self.content]

    @property
    def states(self):
        """'states' values for every feature."""
        return [x['properties']['states'] for x in self.content]

    @property
    def status(self):
        """'status' values for every feature."""
        return [x['properties']['status'] for x in self.content]

    @property
    def urgency(self):
        """'urgency' values for every feature."""
        return [x['properties']['urgency'] for x in self.content]


class ShowResults(RecordCollection):
    """Show results for the Alerts API."""

    def __init__(self, records):
        super(ShowResults, self).__init__(records)

    @property
    def area_description(self):
        """'area_description' values for every feature."""
        return [x['properties']['areaDesc'] for x in self.content]

    @property
    def bbox(self):
        """'bbox' values for every feature."""
        return [x['bbox'] for x in self.content]

    @property
    def category(self):
        """'category' values for every feature."""
        return [x['properties']['category'] for x in self.content]

    @property
    def certainty(self):
        """'certainty' values for every feature."""
        return [x['properties']['certainty'] for x in self.content]

    @property
    def country(self):
        """'country' values for every feature."""
        return [x['properties']['country'] for x in self.content]

    @property
    def description(self):
        """'description' values for every feature."""
        return [x['properties']['description'] for x in self.content]

    @property
    def effective(self):
        """'effective' values for every feature."""
        return [x['properties']['effective'] for x in self.content]

    @property
    def event(self):
        """'event' values for every feature."""
        return [x['properties']['event'] for x in self.content]

    @property
    def expires(self):
        """'expires' values for every feature."""
        return [x['properties']['expires'] for x in self.content]

    @property
    def headline(self):
        """'headline' values for every feature."""
        return [x['properties']['headline'] for x in self.content]

    @property
    def id(self):
        """'id' values for every feature."""
        return [x['id'] for x in self.content]

    @property
    def origin(self):
        """'origin' values for every feature."""
        return [x['properties']['origin'] for x in self.content]

    @property
    def severity(self):
        """'severity' values for every feature."""
        return [x['properties']['severity'] for x in self.content]

    @property
    def states(self):
        """'states' values for every feature."""
        return [x['properties']['states'] for x in self.content]

    @property
    def status(self):
        """'status' values for every feature."""
        return [x['properties']['status'] for x in self.content]

    @property
    def urgency(self):
        """'urgency' values for every feature."""
        return [x['properties']['urgency'] for x in self.content]
