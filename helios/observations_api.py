"""
Helios Observations API.

Methods are meant to represent the core functionality in the developer
documentation.  Some may have additional functionality for convenience.

"""
import logging
from collections import namedtuple

import requests

from helios.core import SDKCore, IndexMixin, ShowMixin, DownloadImagesMixin
from helios.utilities import logging_utils


class Observations(DownloadImagesMixin, ShowMixin, IndexMixin, SDKCore):
    """
    The Observations API provides ground-truth data generated by the Helios
    analytics.

    """

    core_api = 'observations'

    def __init__(self, session=None):
        """
        Initialize Observations instance.

        Args:
            session (helios.Session object, optional): An instance of the
                Session. Defaults to None. If unused a session will be
                created for you.

        """
        super(Observations, self).__init__(session=session)
        self.logger = logging.getLogger(__name__)

    def index(self, **kwargs):
        """
        Return a list of observations matching the provided spatial, text, or
        metadata filters.

        The maximum skip value is 4000. If this is reached, truncated results
        will be returned. You will need to refine your query to avoid this.

        Usage example:

        .. code-block:: python

            import helios
            obs = helios.Observations()
            state = 'Maryland'
            bbox = [-169.352,1.137,-1.690,64.008]
            sensors = 'sensors[visibility][min]=0&sensors[visibility][max]=1'
            results = obs.index(state=state,
                                bbox=bbox,
                                sensors=sensors)

        Usage example for transitions:

        .. code-block:: python

            import helios
            obs = helios.Observations()
            # transition from dry/wet to partial/fully-covered snow roads
            sensors = 'sensors[road_weather][data][min]=6&sensors[road_weather][prev][max]=3'
            results = obs.index(sensors=sensors_query)

        Args:
            **kwargs: Any keyword arguments found in the documentation.

        Returns:
             list: GeoJSON feature collections.

        """
        return super(Observations, self).index(**kwargs)

    @logging_utils.log_entrance_exit
    def preview(self, observation_ids, check_for_duds=True):
        """
        Return a preview image for an observation.

        This API call will attempt to filter out unusable images
        (e.g. full image text/logos, etc.) and will return the most recent
        image for the observation time period.

        Args:
            observation_ids (str or sequence of strs): list of observation IDs.
            check_for_duds (bool, optional): Flag to remove dud images from
                results. Defaults to True.

        Returns:
            sequence of strs: Image URLs.

        """
        # Force iterable
        if not isinstance(observation_ids, (list, tuple)):
            observation_ids = [observation_ids]

        # Create messages for worker.
        Message = namedtuple('Message', ['observation_id', 'check_for_duds'])
        messages = [Message(x, check_for_duds) for x in observation_ids]

        # Process messages using the worker function.
        results = self.process_messages(self.__preview_worker, messages)

        # Remove errors, if they exist
        results = [x for x in results if x != -1]

        # Check results
        n_obs = len(observation_ids)
        n_successful = len(results)
        message = 'Leaving preview({} out of {} successful)'.format(n_successful, n_obs)

        if n_successful == 0:
            self.logger.error(message)
            return -1
        elif n_successful < n_obs:
            self.logger.warning(message)
        else:
            self.logger.info(message)

        return results

    def __preview_worker(self, msg):
        """msg must contain observation_id and check_for_duds"""

        query_str = '{}/{}/{}/preview'.format(self.base_api_url,
                                              self.core_api,
                                              msg.observation_id)

        try:
            resp = self.request_manager.get(query_str)
            redirect_url = resp.url[0:resp.url.index('?')]
        except requests.exceptions.RequestException:
            return -1

        # Check header for dud statuses.
        if msg.check_for_duds:
            try:
                # Redirect URLs do not use api credentials
                resp2 = self.request_manager.head(redirect_url, use_api_cred=False)
            except requests.exceptions.RequestException:
                return -1

            if self.check_headers_for_dud(resp2.headers):
                self.logger.info('preview query returned dud image: %s',
                                 query_str)
                return None

        return redirect_url
